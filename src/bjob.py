"""
Handle job submitting to LSF
"""


# Dependencies
import subprocess
import re


class Bjob(object):

    def __init__(self, id=None, status=None):
        self.id = id
        self.status = status

    def get_status(self):
        """Retrieve job status

        Return
        (str)   Job status, which can be 'RUN', 'PEND', 'DONE', 'EXIT'
        """
        # Return retrieved status
        return self.__class__.status(self.id)

    @classmethod
    def run(cls, *args, **kwargs):
        raise NotImplementedError

    @classmethod
    def status(cls, job_id):
        # Retrieve command output
        out = subprocess.run(
            capture_output=True,
            encoding='utf-8',
            check=True,
            args=['bjobs', '-noheader', '-a', job_id]
        )
        # Debug
        print('bjobs (status):', out)
        # Split output
        out = re.sub(r'[ \t]+', ' ', out.stdout).split(' ')
        # Retrieve status as string
        status = str(out[2])
        # Check status value
        if status not in set(['RUN', 'PEND', 'DONE', 'EXIT']):
            raise ValueError('Unable to parse status command')
        # Return retrieved status
        return status

    @classmethod
    def kill(cls, job_id):
        raise NotImplementedError

    @classmethod
    def id_from_string(cls, in_string):
        """ Retrieve process id from verbose output

        Args
        in_string (str):    Input string, generated by submitting a job to lsf

        Return
        (str):              Job id, as string (avoids cutting leading zeroes)
        """
        return str(re.search(r'^Job \<([\d]+)\>', in_string).group(1))
